// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package user

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserList struct {
	Usermap              []*UserList_UserMap `protobuf:"bytes,1,rep,name=usermap,proto3" json:"usermap,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}

func (m *UserList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserList.Unmarshal(m, b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return xxx_messageInfo_UserList.Size(m)
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetUsermap() []*UserList_UserMap {
	if m != nil {
		return m.Usermap
	}
	return nil
}

type UserList_UserMap struct {
	RowMap               map[string]string `protobuf:"bytes,1,rep,name=rowMap,proto3" json:"rowMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UserList_UserMap) Reset()         { *m = UserList_UserMap{} }
func (m *UserList_UserMap) String() string { return proto.CompactTextString(m) }
func (*UserList_UserMap) ProtoMessage()    {}
func (*UserList_UserMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0, 0}
}

func (m *UserList_UserMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserList_UserMap.Unmarshal(m, b)
}
func (m *UserList_UserMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserList_UserMap.Marshal(b, m, deterministic)
}
func (m *UserList_UserMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList_UserMap.Merge(m, src)
}
func (m *UserList_UserMap) XXX_Size() int {
	return xxx_messageInfo_UserList_UserMap.Size(m)
}
func (m *UserList_UserMap) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList_UserMap.DiscardUnknown(m)
}

var xxx_messageInfo_UserList_UserMap proto.InternalMessageInfo

func (m *UserList_UserMap) GetRowMap() map[string]string {
	if m != nil {
		return m.RowMap
	}
	return nil
}

type SearchKey struct {
	// Types that are valid to be assigned to Key:
	//	*SearchKey_Id
	//	*SearchKey_Name
	Key                  isSearchKey_Key `protobuf_oneof:"Key"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SearchKey) Reset()         { *m = SearchKey{} }
func (m *SearchKey) String() string { return proto.CompactTextString(m) }
func (*SearchKey) ProtoMessage()    {}
func (*SearchKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}

func (m *SearchKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchKey.Unmarshal(m, b)
}
func (m *SearchKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchKey.Marshal(b, m, deterministic)
}
func (m *SearchKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchKey.Merge(m, src)
}
func (m *SearchKey) XXX_Size() int {
	return xxx_messageInfo_SearchKey.Size(m)
}
func (m *SearchKey) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchKey.DiscardUnknown(m)
}

var xxx_messageInfo_SearchKey proto.InternalMessageInfo

type isSearchKey_Key interface {
	isSearchKey_Key()
}

type SearchKey_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type SearchKey_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*SearchKey_Id) isSearchKey_Key() {}

func (*SearchKey_Name) isSearchKey_Key() {}

func (m *SearchKey) GetKey() isSearchKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SearchKey) GetId() string {
	if x, ok := m.GetKey().(*SearchKey_Id); ok {
		return x.Id
	}
	return ""
}

func (m *SearchKey) GetName() string {
	if x, ok := m.GetKey().(*SearchKey_Name); ok {
		return x.Name
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SearchKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SearchKey_Id)(nil),
		(*SearchKey_Name)(nil),
	}
}

func init() {
	proto.RegisterType((*UserList)(nil), "UserList")
	proto.RegisterType((*UserList_UserMap)(nil), "UserList.UserMap")
	proto.RegisterMapType((map[string]string)(nil), "UserList.UserMap.RowMapEntry")
	proto.RegisterType((*SearchKey)(nil), "SearchKey")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xda, 0xc2, 0xc8, 0xc5, 0x11, 0x5a, 0x9c, 0x5a, 0xe4,
	0x93, 0x59, 0x5c, 0x22, 0xa4, 0xcd, 0xc5, 0x0e, 0x92, 0xca, 0x4d, 0x2c, 0x90, 0x60, 0x54, 0x60,
	0xd6, 0xe0, 0x36, 0x12, 0xd4, 0x83, 0xc9, 0x81, 0x19, 0xbe, 0x89, 0x05, 0x41, 0x30, 0x15, 0x52,
	0xd5, 0x5c, 0xec, 0x50, 0x31, 0x21, 0x53, 0x2e, 0xb6, 0xa2, 0xfc, 0x72, 0x5f, 0xb8, 0x36, 0x59,
	0x0c, 0x6d, 0x7a, 0x41, 0x60, 0x79, 0xd7, 0xbc, 0x92, 0xa2, 0xca, 0x20, 0xa8, 0x62, 0x29, 0x4b,
	0x2e, 0x6e, 0x24, 0x61, 0x21, 0x01, 0x2e, 0xe6, 0xec, 0xd4, 0x4a, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0xce, 0x20, 0x10, 0x53, 0x48, 0x84, 0x8b, 0xb5, 0x2c, 0x31, 0xa7, 0x34, 0x55, 0x82, 0x09, 0x2c,
	0x06, 0xe1, 0x58, 0x31, 0x59, 0x30, 0x2a, 0x59, 0x71, 0x71, 0x06, 0xa7, 0x26, 0x16, 0x25, 0x67,
	0x78, 0xa7, 0x82, 0x34, 0x32, 0x65, 0xa6, 0x40, 0xf4, 0x79, 0x30, 0x04, 0x31, 0x65, 0xa6, 0x08,
	0x89, 0x70, 0xb1, 0xe4, 0x25, 0xe6, 0x42, 0xf5, 0x79, 0x30, 0x04, 0x81, 0x79, 0x4e, 0xac, 0x5c,
	0xcc, 0xde, 0xa9, 0x95, 0x46, 0x46, 0x5c, 0x2c, 0x20, 0x3f, 0x08, 0x69, 0x71, 0x71, 0xa7, 0xa7,
	0x96, 0xc0, 0x3d, 0xcf, 0xa5, 0x07, 0x37, 0x51, 0x8a, 0x13, 0xee, 0x01, 0x25, 0x06, 0x0d, 0x46,
	0x03, 0xc6, 0x24, 0x36, 0x70, 0x68, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x01, 0x21, 0x25,
	0x61, 0x3b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	GetUserList(ctx context.Context, opts ...grpc.CallOption) (User_GetUserListClient, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUserList(ctx context.Context, opts ...grpc.CallOption) (User_GetUserListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_User_serviceDesc.Streams[0], "/user/getUserList", opts...)
	if err != nil {
		return nil, err
	}
	x := &userGetUserListClient{stream}
	return x, nil
}

type User_GetUserListClient interface {
	Send(*SearchKey) error
	Recv() (*UserList, error)
	grpc.ClientStream
}

type userGetUserListClient struct {
	grpc.ClientStream
}

func (x *userGetUserListClient) Send(m *SearchKey) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userGetUserListClient) Recv() (*UserList, error) {
	m := new(UserList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	GetUserList(User_GetUserListServer) error
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_GetUserList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).GetUserList(&userGetUserListServer{stream})
}

type User_GetUserListServer interface {
	Send(*UserList) error
	Recv() (*SearchKey, error)
	grpc.ServerStream
}

type userGetUserListServer struct {
	grpc.ServerStream
}

func (x *userGetUserListServer) Send(m *UserList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userGetUserListServer) Recv() (*SearchKey, error) {
	m := new(SearchKey)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user",
	HandlerType: (*UserServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getUserList",
			Handler:       _User_GetUserList_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
